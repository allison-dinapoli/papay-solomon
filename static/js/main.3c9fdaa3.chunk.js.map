{"version":3,"sources":["components/base.js","components/ImageView.js","components/gallery.js","main.js","serviceWorker.js","index.js"],"names":["Base","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","navbar","react_default","a","createElement","Navbar","collapseOnSelect","Header","Brand","Link","to","Toggle","Collapse","Nav","pullRight","NavItem","eventKey","content","className","console","dir","React","Component","ImageView","currentImageIndex","index","backToGallery","history","push","nextPhoto","nextPhotoPos","setState","numPhotos","images","length","nextPhotoId","concat","id","previousPhotoId","previousPhotoPos","previousPhoto","openPhotoZoom","showImageZoom","match","params","Number","currentImageId","pageContent","width","height","style","textAlign","href","encodeURI","window","location","target","src","name","cursor","onClick","alt","display","justifyContent","alignItems","Grid","Row","Col","xs","sm","md","lg","xl","top","position","left","marginLeft","padding","ReactImageMagnify","smallImage","srcSet","srcset","isFluidWidth","sizes","largeImage","enlargedImagePortalId","base_Base","withRouter","Gallery","openImage","getFourImagesStartingAtN","n","startingIndex","picturesPerRow","columns","i","image","paddingLeft","paddingRight","paddingTop","paddingBottom","getRows","imageCount","batches","Math","ceil","rows","grid","HomePage","Main","Switch","Route","exact","path","component","Boolean","hostname","ReactDOM","render","BrowserRouter","main","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c9fdaa3.chunk.js","sourcesContent":["import React from 'react'; \r\nimport { Nav, Navbar, NavItem } from 'react-bootstrap'; \r\nimport { Link } from 'react-router-dom';\r\nimport './base.css';\r\n\r\n\r\nexport default class Base extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props); \r\n    \r\n    this.state = {\r\n    }; \r\n  }\r\n  render() {\r\n    var navbar = \r\n      <Navbar collapseOnSelect>\r\n        <Navbar.Header>\r\n          <Navbar.Brand>\r\n            <Link to='/'>Papay Solomon</Link>\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle />\r\n        </Navbar.Header>\r\n        <Navbar.Collapse>\r\n          <Nav pullRight>\r\n            <NavItem eventKey={1}>\r\n              <Link to='/gallery'>Gallery</Link>\r\n            </NavItem>\r\n            <NavItem eventKey={2}>\r\n              <Link to='/about'>About</Link>\r\n            </NavItem>\r\n            <NavItem eventKey={3}>\r\n              <Link to='/news'>News</Link>\r\n            </NavItem>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>; \r\n\r\n    var content = <div className=\"content\">{this.props.content}</div>\r\n    console.dir(this.props.content)\r\n\r\n    return (\r\n      <div>{navbar}{content}</div>\r\n    );\r\n  }\r\n};\r\n","import React from 'react'; \r\nimport { Grid, Row, Col } from 'react-bootstrap';\r\nimport ReactImageMagnify from 'react-image-magnify';\r\nimport images from '../json/paintings.json'; \r\nimport { Link, withRouter } from 'react-router-dom'; \r\nimport Base from './base'; \r\n\r\nclass ImageView extends React.Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    let currentImageIndex;\r\n    for (let index in images) {\r\n      if ( images[index].id === this.props.match.params.id ) {\r\n        currentImageIndex = Number(index);\r\n      }\r\n    }\r\n\r\n    this.state = {\r\n      currentImageIndex: currentImageIndex,\r\n      currentImageId: this.props.match.params.id,\r\n      showImageZoom: false\r\n    }\r\n  }\r\n \r\n  backToGallery = () => {\r\n    this.props.history.push(\"/gallery/\");  \r\n  }\r\n\r\n  nextPhoto = () => {\r\n    var nextPhoto = this.nextPhotoPos();  \r\n    this.setState({currentImageIndex: nextPhoto}); \r\n  }\r\n\r\n  nextPhotoPos = () => {\r\n    var numPhotos = images.length;\r\n    var nextPhoto = (this.state.currentImageIndex + 1) % numPhotos;\r\n    return nextPhoto; \r\n  }\r\n\r\n  nextPhotoId = () => {\r\n    var nextPhoto = this.nextPhotoPos();\r\n    let nextRoute = `/gallery/${images[nextPhoto].id}`;\r\n    return nextRoute;\r\n  }\r\n\r\n  previousPhotoPos() {\r\n    var numPhotos = images.length;\r\n    var nextPhoto = (this.state.currentImageIndex - 1);\r\n    if (nextPhoto < 0) {\r\n      nextPhoto = numPhotos - 1; \r\n    }\r\n    return nextPhoto; \r\n  }\r\n  \r\n  previousPhotoId = () => {\r\n    var nextPhoto = this.previousPhotoPos(); \r\n    return \"/gallery/\" + images[nextPhoto].id; \r\n  }\r\n\r\n  previousPhoto = () => {\r\n    var nextPhoto = this.previousPhotoPos(); \r\n    this.setState({currentImageIndex: nextPhoto}); \r\n  }\r\n\r\n  openPhotoZoom = () => {\r\n    this.setState({showImageZoom:true});\r\n  }\r\n\r\n  render() {\r\n    const pageContent =  <div>\r\n    <table width=\"100%\" height=\"40px\">\r\n      <tbody>\r\n        <tr>\r\n          <td style={{textAlign:\"left\"}} width=\"10%\">\r\n            <a href={\"https://www.facebook.com/sharer/sharer.php?u=\" + encodeURI(window.location.href)} target=\"_blank\"><img src=\"/img/icons/facebook.svg\"/></a> \r\n            <a href={\"https://www.twitter.com/intent/tweet?url=\" + encodeURI(window.location.href)} target=\"_blank\"><img src=\"/img/icons/twitter.svg\"/></a>\r\n            <a href={\"https://www.tumblr.com/widgets/share/tool?canonicalUrl=\" + encodeURI(window.location.href)} target=\"_blank\"><img src=\"/img/icons/tumblr.svg\"/></a>\r\n            <a href={\"https://pinterest.com/pin/create/link/?url=\" + encodeURI(window.location.href)} target=\"_blank\"><img src=\"/img/icons/pinterest.svg\"/></a>\r\n          </td>\r\n          <td style={{textAlign:\"center\"}} className=\"subheader\" width=\"80%\">{images[this.state.currentImageIndex].name}</td>\r\n          <td style={{textAlign:\"right\"}} width=\"10%\"><img src=\"/img/icons/baseline-close-24px.svg\" width=\"40px\" style={{cursor:\"pointer\"}} onClick={this.backToGallery} alt=\"back to gallery\"/></td>\r\n        </tr>\r\n      </tbody>\r\n    </table> \r\n\r\n    <div style={{display: \"flex\", justifyContent: \"center\",  alignItems: \"center\", height: \"100%\"}}>\r\n      <Grid style={{width: \"100%\"}}>\r\n        <Row>\r\n          <Col xs={1} sm={1} md={1} lg={1} xl={1}>\r\n            <Link to={this.previousPhotoId()}>\r\n              <img src=\"/img/icons/baseline-arrow_back_ios-24px.svg\" width=\"60px\" style={{cursor:\"pointer\", top: \"50%\", position: \"absolute\", left:\"50%\", marginLeft:\"-30px\"}} onClick={this.previousPhoto} alt=\"previous\"/>\r\n            </Link>\r\n          </Col>\r\n          <Col xs={10} sm={10} md={10} lg={10} xl={10}>\r\n            <div style={{height: \"600px\", textAlign: \"center\"}}>\r\n            <table style={{width: \"100%\"}}>\r\n              <tr>\r\n                <td style={{width: \"50%\", padding: \"10px\"}}>\r\n              <ReactImageMagnify {...{\r\n                smallImage: {\r\n                  alt: images[this.state.currentImageIndex].name, \r\n                  src: images[this.state.currentImageIndex].src,\r\n                  srcSet: images[this.state.currentImageIndex].srcset,\r\n                  isFluidWidth: true,\r\n                  sizes: '(max-width: 480px) 70vw, (max-width: 1000px) 40vw, 400px'\r\n                }, \r\n                largeImage: {\r\n                  alt: images[this.state.currentImageIndex].name, \r\n                  src: images[this.state.currentImageIndex].src,\r\n                  width: images[this.state.currentImageIndex].width,\r\n                  height: images[this.state.currentImageIndex].height\r\n                }, \r\n                enlargedImagePortalId: \"test\" \r\n                \r\n              }} />\r\n              </td>\r\n              <td>\r\n                <span id=\"test\" />\r\n              </td>\r\n              </tr>\r\n\r\n              </table>\r\n            </div>\r\n          </Col>\r\n          <Col xs={1} sm={1} md={1} lg={1} xl={1}>\r\n            <Link to={this.nextPhotoId()}>\r\n              <img src=\"/img/icons/baseline-arrow_forward_ios-24px.svg\" width=\"60px\" style={{cursor:\"pointer\", position: \"absolute\", top: \"50%\", left: \"50%\", marginLeft: \"-30px\"}} alt=\"next\" onClick={this.nextPhoto}/>\r\n            </Link>\r\n          </Col>\r\n        </Row>\r\n      </Grid>\r\n    </div>\r\n    </div> ; \r\n    return (\r\n      <Base content={pageContent} />\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(ImageView);\r\n","import React from 'react'; \r\nimport images from '../json/paintings.json'; \r\nimport Base from './base'; \r\nimport { Grid, Row, Col } from 'react-bootstrap';\r\n\r\nexport default class Gallery extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      images: images,\r\n      currentImageIndex: 0\r\n    }\r\n    this.picturesPerRow = 3; \r\n  }\r\n\r\n  openImage = (currentImageIndex) => {\r\n    // You can use the react router history instead, and avoid the full page redirect :D\r\n    //var newLocation = window.location.href; \r\n    //var domain = newLocation.split(\"/gallery\")[0]; \r\n    //window.location.href = domain + \"/gallery/\" + this.state.images[currentImageIndex].id;\r\n    //console.log(currentImageIndex.target.id);\r\n    this.props.history.push(\"/gallery/\" + this.state.images[currentImageIndex.target.id].id);\r\n  }   \r\n\r\n  getFourImagesStartingAtN = (n) => {\r\n    const startingIndex = n*this.picturesPerRow;\r\n    let columns = [];\r\n    for (let i = startingIndex; i < startingIndex + this.picturesPerRow; i++) {\r\n      if (i < images.length) {\r\n        let image = images[i];\r\n        columns.push(<Col sm={4} style={{paddingLeft: \"1vw\", paddingRight: \"1vw\", paddingTop: \"4vh\", paddingBottom: \"3vh\"}}><img id={i} src={image['thumbnail']} style={{cursor: \"pointer\"}} onClick={this.openImage}></img></Col>);\r\n      }\r\n    }\r\n    return columns;\r\n  }\r\n\r\n  getRows = () => {\r\n    const imageCount = images.length;\r\n    const batches = Math.ceil(imageCount/this.picturesPerRow);\r\n    let rows = [];\r\n    for (let n = 0; n < batches; n++) {\r\n      let columns = this.getFourImagesStartingAtN(n);\r\n      rows.push(<Row>{columns}</Row>);\r\n    }\r\n    return rows;\r\n  }\r\n\r\n  render() {\r\n    const grid = <Grid>{this.getRows()}</Grid>; \r\n    return (<Base content={grid} />);\r\n  }\r\n}","import React from 'react';\r\nimport { Switch, Route, Link } from 'react-router-dom';\r\nimport Base from './components/base';\r\nimport ImageView from './components/ImageView';\r\nimport Gallery from './components/gallery';\r\n\r\nconst HomePage = () => (\r\n  <Base content={<div>\r\n    <h2> Welcome! </h2>\r\n    <Link to='/gallery'>Gallery</Link>\r\n</div>} />\r\n)\r\n\r\nconst Main = () => (\r\n    <div>\r\n        <main>\r\n            <Switch>\r\n                <Route exact path='/' component={HomePage}/>\r\n                <Route path='/gallery/:id' component={ImageView}/>\r\n                <Route path='/gallery' component={Gallery}/>}/>\r\n                <Route path='/about' component={HomePage}/>\r\n                <Route path='/news' component={HomePage}/>\r\n            </Switch>\r\n        </main>\r\n    </div>\r\n)\r\n\r\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './main';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Main />\n  </BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}